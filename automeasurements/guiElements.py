
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets
import automeasurements.programInstance as programInstance
from automeasurements.AutoMeasurements import *
import automeasurements.tools
import automeasurements.instrument
import automeasurements.runtime as runtime
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvas
from PyQt5.QtWidgets import*

class MplWidget(QWidget):
    
        def __init__(self, parent = None, figure=None, canvas=None):
            
            QWidget.__init__(self, parent)
            
            vertical_layout = QVBoxLayout()
            vertical_layout.addWidget(canvas)
            
            self.resetFigure(figure)
            self.setLayout(vertical_layout)

        def resetFigure(self, figure):
            plt.legend(loc="best")
            if figure.get_axes()!=[]:
                for ax in figure.get_axes(): figure.delaxes(ax)
            ax1 = figure.add_subplot(1,1,1)
            
            
            ax1.set_xlabel('Frequency [Hz]')
            
            ax1.set_xscale('log')
            
            ax1.tick_params(axis='y')
            ax1.grid(True,"both")
            
            ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
            
            
              # we already handled the x-label with ax1
            
            ax2.tick_params(axis='y')
            ax2.grid(True,"both")     
            
            figure.tight_layout()  # otherwise the right y-label is slightly clipped
   
           
            
        

        def updateFigure(self,  df, figure, canvas, displayedList, spanFunction, color=None):
            frequency=df["Frequency"].tolist()
           
            if not color: 
                color1 = 'tab:red'
                color2 = 'tab:blue'
            else: 
                color1 ='tab:'+color
                color2 ='tab:'+color
            self.resetFigure(figure)
            axes=figure.get_axes()
            
            if displayedList[0]!="": 
                yLeft=df[displayedList[0]].tolist()
                plot1=axes[0].plot(frequency, yLeft, color=color1, marker="o", label=displayedList[0])
                axes[0].set_ylabel(displayedList[0], color=color1)
                axes[0].tick_params(axis='y', labelcolor=color1)
                axes[0].grid(True,"both")
            if displayedList[1]!="": 
                yRight=df[displayedList[1]].tolist()
                plot2=axes[1].plot(frequency, yRight, color=color2, marker="o", label=displayedList[1])
                axes[1].set_ylabel(displayedList[1], color=color2)
                axes[1].tick_params(axis='y', labelcolor=color2)
                axes[1].grid(True,"both")
            plt.legend(loc="best")
            span = SpanSelector(figure.gca(), spanFunction, 'horizontal', useblit=True, rectprops=dict(alpha=0.5, facecolor='red'))
            span.active=False
            figure.canvas.draw()
            return span
        
class Ui_MainWindow(object):
   
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1080, 640)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.figure=Figure()
        self.canvas = FigureCanvas(self.figure)
        self.MplWidget = MplWidget(self.centralwidget, self.figure, self.canvas)
        self.MplWidget.setMinimumSize(QtCore.QSize(480, 320))
        self.MplWidget.setObjectName("MplWidget")
        self.horizontalLayout.addWidget(self.MplWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 913, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dockWidget = QtWidgets.QDockWidget(MainWindow)
        self.dockWidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dockWidget.sizePolicy().hasHeightForWidth())
        self.dockWidget.setSizePolicy(sizePolicy)
        self.dockWidget.setObjectName("dockWidget")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.gridLayout = QtWidgets.QGridLayout(self.dockWidgetContents)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_6 = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_7.addWidget(self.label_6)
        self.measScaleComboBox = QtWidgets.QComboBox(self.dockWidgetContents)
        self.measScaleComboBox.setWhatsThis("")
        self.measScaleComboBox.setObjectName("measScaleComboBox")
        self.measScaleComboBox.addItem("")
        self.measScaleComboBox.addItem("")
        self.horizontalLayout_7.addWidget(self.measScaleComboBox)
        self.verticalLayout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_5 = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_6.addWidget(self.label_5)
        self.pointNumberSpinBox = QtWidgets.QSpinBox(self.dockWidgetContents)
        self.pointNumberSpinBox.setMinimum(8)
        self.pointNumberSpinBox.setMaximum(9999)
        self.pointNumberSpinBox.setObjectName("pointNumberSpinBox")
        self.horizontalLayout_6.addWidget(self.pointNumberSpinBox)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.dockWidgetContents)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.startfreqDoubleSpinBox = QtWidgets.QDoubleSpinBox(self.dockWidgetContents)
        self.startfreqDoubleSpinBox.setMinimum(10.0)
        self.startfreqDoubleSpinBox.setMaximum(19999999.99)
        self.startfreqDoubleSpinBox.setObjectName("startfreqDoubleSpinBox")
        self.horizontalLayout_2.addWidget(self.startfreqDoubleSpinBox)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.endfreqDoubleSpinBox = QtWidgets.QDoubleSpinBox(self.dockWidgetContents)
        self.endfreqDoubleSpinBox.setMinimum(10.0)
        self.endfreqDoubleSpinBox.setMaximum(19999999.99)
        self.endfreqDoubleSpinBox.setProperty("value", 10000.0)
        self.endfreqDoubleSpinBox.setObjectName("endfreqDoubleSpinBox")
        self.horizontalLayout_3.addWidget(self.endfreqDoubleSpinBox)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_3 = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.centerDoubleSpinBox = QtWidgets.QDoubleSpinBox(self.dockWidgetContents)
        self.centerDoubleSpinBox.setMinimum(0.0)
        self.centerDoubleSpinBox.setMaximum(19999999999.0)
        self.centerDoubleSpinBox.setProperty("value", 50000.0)
        self.centerDoubleSpinBox.setObjectName("centerDoubleSpinBox")
        self.horizontalLayout_4.addWidget(self.centerDoubleSpinBox)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_4 = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_5.addWidget(self.label_4)
        self.spanDoubleSpinBox = QtWidgets.QDoubleSpinBox(self.dockWidgetContents)
        self.spanDoubleSpinBox.setMinimum(0.0)
        self.spanDoubleSpinBox.setMaximum(20000000.0)
        self.spanDoubleSpinBox.setProperty("value", 0.0)
        self.spanDoubleSpinBox.setObjectName("spanDoubleSpinBox")
        self.horizontalLayout_5.addWidget(self.spanDoubleSpinBox)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.label_26 = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_26.setObjectName("label_26")
        self.horizontalLayout_26.addWidget(self.label_26)
        self.noiseToleranceDoubleSpinBox = QtWidgets.QDoubleSpinBox(self.dockWidgetContents)
        self.noiseToleranceDoubleSpinBox.setMinimum(0.0)
        self.noiseToleranceDoubleSpinBox.setMaximum(5.0)
        self.noiseToleranceDoubleSpinBox.setSingleStep(0.01)
        self.noiseToleranceDoubleSpinBox.setProperty("value", 0.1)
        self.noiseToleranceDoubleSpinBox.setObjectName("noiseToleranceDoubleSpinBox")
        self.horizontalLayout_26.addWidget(self.noiseToleranceDoubleSpinBox)
        self.verticalLayout.addLayout(self.horizontalLayout_26)
        self.getSpanPushButton = QtWidgets.QPushButton(self.dockWidgetContents)
        self.getSpanPushButton.setObjectName("getSpanPushButton")
        self.verticalLayout.addWidget(self.getSpanPushButton)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_8 = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_11.addWidget(self.label_8)
        self.chanInComboBox = QtWidgets.QComboBox(self.dockWidgetContents)
        self.chanInComboBox.setObjectName("chanInComboBox")
        self.chanInComboBox.addItem("")
        self.chanInComboBox.addItem("")
        self.chanInComboBox.addItem("")
        self.chanInComboBox.addItem("")
        self.horizontalLayout_11.addWidget(self.chanInComboBox)
        self.verticalLayout_6.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_9 = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_10.addWidget(self.label_9)
        self.chanOutcomboBox = QtWidgets.QComboBox(self.dockWidgetContents)
        self.chanOutcomboBox.setObjectName("chanOutcomboBox")
        self.chanOutcomboBox.addItem("")
        self.chanOutcomboBox.addItem("")
        self.chanOutcomboBox.addItem("")
        self.chanOutcomboBox.addItem("")
        self.chanOutcomboBox.addItem("")
        self.horizontalLayout_10.addWidget(self.chanOutcomboBox)
        self.verticalLayout_6.addLayout(self.horizontalLayout_10)
        self.verticalLayout_5.addLayout(self.verticalLayout_6)
        self.label_10 = QtWidgets.QLabel(self.dockWidgetContents)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_5.addWidget(self.label_10)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.mathChan1ComboBox = QtWidgets.QComboBox(self.dockWidgetContents)
        self.mathChan1ComboBox.setObjectName("mathChan1ComboBox")
        self.mathChan1ComboBox.addItem("")
        self.mathChan1ComboBox.addItem("")
        self.mathChan1ComboBox.addItem("")
        self.mathChan1ComboBox.addItem("")
        self.horizontalLayout_9.addWidget(self.mathChan1ComboBox)
        self.mathOperationComboBox = QtWidgets.QComboBox(self.dockWidgetContents)
        self.mathOperationComboBox.setObjectName("mathOperationComboBox")
        self.mathOperationComboBox.addItem("")
        self.mathOperationComboBox.addItem("")
        self.mathOperationComboBox.addItem("")
        self.horizontalLayout_9.addWidget(self.mathOperationComboBox)
        self.mathChan2ComboBox = QtWidgets.QComboBox(self.dockWidgetContents)
        self.mathChan2ComboBox.setObjectName("mathChan2ComboBox")
        self.mathChan2ComboBox.addItem("")
        self.mathChan2ComboBox.addItem("")
        self.mathChan2ComboBox.addItem("")
        self.mathChan2ComboBox.addItem("")
        self.horizontalLayout_9.addWidget(self.mathChan2ComboBox)
        self.verticalLayout_5.addLayout(self.horizontalLayout_9)
        self.verticalLayout_7.addLayout(self.verticalLayout_5)
        self.verticalLayout.addLayout(self.verticalLayout_7)
        self.bodeMeasurePushButton = QtWidgets.QPushButton(self.dockWidgetContents)
        self.bodeMeasurePushButton.setObjectName("bodeMeasurePushButton")
        self.verticalLayout.addWidget(self.bodeMeasurePushButton)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.dockWidget.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget)
        self.dockWidget_2 = QtWidgets.QDockWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dockWidget_2.sizePolicy().hasHeightForWidth())
        self.dockWidget_2.setSizePolicy(sizePolicy)
        self.dockWidget_2.setObjectName("dockWidget_2")
        self.dockWidgetContents_2 = QtWidgets.QWidget()
        self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.measPlotLeftCheckBox = QtWidgets.QCheckBox(self.dockWidgetContents_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.measPlotLeftCheckBox.sizePolicy().hasHeightForWidth())
        self.measPlotLeftCheckBox.setSizePolicy(sizePolicy)
        self.measPlotLeftCheckBox.setChecked(True)
        self.measPlotLeftCheckBox.setObjectName("measPlotLeftCheckBox")
        self.horizontalLayout_27.addWidget(self.measPlotLeftCheckBox)
        self.yLeftComboBox = QtWidgets.QComboBox(self.dockWidgetContents_2)
        self.yLeftComboBox.setObjectName("yLeftComboBox")
        self.horizontalLayout_27.addWidget(self.yLeftComboBox)
        self.verticalLayout_2.addLayout(self.horizontalLayout_27)
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.measPlotRightCheckBox = QtWidgets.QCheckBox(self.dockWidgetContents_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.measPlotRightCheckBox.sizePolicy().hasHeightForWidth())
        self.measPlotRightCheckBox.setSizePolicy(sizePolicy)
        self.measPlotRightCheckBox.setChecked(True)
        self.measPlotRightCheckBox.setObjectName("measPlotRightCheckBox")
        self.horizontalLayout_28.addWidget(self.measPlotRightCheckBox)
        self.yRightComboBox = QtWidgets.QComboBox(self.dockWidgetContents_2)
        self.yRightComboBox.setObjectName("yRightComboBox")
        self.horizontalLayout_28.addWidget(self.yRightComboBox)
        self.verticalLayout_2.addLayout(self.horizontalLayout_28)
        self.measPlotPushButton = QtWidgets.QPushButton(self.dockWidgetContents_2)
        self.measPlotPushButton.setObjectName("measPlotPushButton")
        self.verticalLayout_2.addWidget(self.measPlotPushButton)
        self.measClearPushButton = QtWidgets.QPushButton(self.dockWidgetContents_2)
        self.measClearPushButton.setObjectName("measClearPushButton")
        self.verticalLayout_2.addWidget(self.measClearPushButton)
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.measExportPushButton = QtWidgets.QPushButton(self.dockWidgetContents_2)
        self.measExportPushButton.setObjectName("measExportPushButton")
        self.horizontalLayout_29.addWidget(self.measExportPushButton)
        self.fileExtensionComboBox = QtWidgets.QComboBox(self.dockWidgetContents_2)
        self.fileExtensionComboBox.setObjectName("fileExtensionComboBox")
        self.fileExtensionComboBox.addItem("")
        self.fileExtensionComboBox.addItem("")
        self.fileExtensionComboBox.addItem("")
        self.horizontalLayout_29.addWidget(self.fileExtensionComboBox)
        self.verticalLayout_2.addLayout(self.horizontalLayout_29)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.dockWidget_2.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidget_2)
        self.dockWidget_6 = QtWidgets.QDockWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dockWidget_6.sizePolicy().hasHeightForWidth())
        self.dockWidget_6.setSizePolicy(sizePolicy)
        self.dockWidget_6.setMinimumSize(QtCore.QSize(200, 290))
        self.dockWidget_6.setObjectName("dockWidget_6")
        self.dockWidgetContents_6 = QtWidgets.QWidget()
        self.dockWidgetContents_6.setObjectName("dockWidgetContents_6")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.dockWidgetContents_6)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.toolBox_3 = QtWidgets.QToolBox(self.dockWidgetContents_6)
        self.toolBox_3.setMinimumSize(QtCore.QSize(0, 250))
        self.toolBox_3.setMaximumSize(QtCore.QSize(16777215, 250))
        self.toolBox_3.setObjectName("toolBox_3")
        self.oscpage = QtWidgets.QWidget()
        self.oscpage.setGeometry(QtCore.QRect(0, 0, 165, 202))
        self.oscpage.setObjectName("oscpage")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.oscpage)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_11 = QtWidgets.QLabel(self.oscpage)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_12.addWidget(self.label_11)
        self.acqModeComboBox = QtWidgets.QComboBox(self.oscpage)
        self.acqModeComboBox.setObjectName("acqModeComboBox")
        self.acqModeComboBox.addItem("")
        self.acqModeComboBox.addItem("")
        self.acqModeComboBox.addItem("")
        self.acqModeComboBox.addItem("")
        self.horizontalLayout_12.addWidget(self.acqModeComboBox)
        self.verticalLayout_13.addLayout(self.horizontalLayout_12)
        self.line = QtWidgets.QFrame(self.oscpage)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_13.addWidget(self.line)
        self.label_25 = QtWidgets.QLabel(self.oscpage)
        self.label_25.setObjectName("label_25")
        self.verticalLayout_13.addWidget(self.label_25)
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.label_22 = QtWidgets.QLabel(self.oscpage)
        self.label_22.setObjectName("label_22")
        self.horizontalLayout_21.addWidget(self.label_22)
        self.triggerSourceComboBox = QtWidgets.QComboBox(self.oscpage)
        self.triggerSourceComboBox.setObjectName("triggerSourceComboBox")
        self.triggerSourceComboBox.addItem("")
        self.triggerSourceComboBox.addItem("")
        self.triggerSourceComboBox.addItem("")
        self.triggerSourceComboBox.addItem("")
        self.horizontalLayout_21.addWidget(self.triggerSourceComboBox)
        self.verticalLayout_12.addLayout(self.horizontalLayout_21)
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.label_21 = QtWidgets.QLabel(self.oscpage)
        self.label_21.setObjectName("label_21")
        self.horizontalLayout_22.addWidget(self.label_21)
        self.triggerModeComboBox = QtWidgets.QComboBox(self.oscpage)
        self.triggerModeComboBox.setObjectName("triggerModeComboBox")
        self.triggerModeComboBox.addItem("")
        self.triggerModeComboBox.addItem("")
        self.horizontalLayout_22.addWidget(self.triggerModeComboBox)
        self.verticalLayout_12.addLayout(self.horizontalLayout_22)
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.label_20 = QtWidgets.QLabel(self.oscpage)
        self.label_20.setObjectName("label_20")
        self.horizontalLayout_23.addWidget(self.label_20)
        self.triggerCouplingComboBox = QtWidgets.QComboBox(self.oscpage)
        self.triggerCouplingComboBox.setObjectName("triggerCouplingComboBox")
        self.triggerCouplingComboBox.addItem("")
        self.triggerCouplingComboBox.addItem("")
        self.horizontalLayout_23.addWidget(self.triggerCouplingComboBox)
        self.verticalLayout_12.addLayout(self.horizontalLayout_23)
        self.trigNoiseRejCheckBox = QtWidgets.QCheckBox(self.oscpage)
        self.trigNoiseRejCheckBox.setObjectName("trigNoiseRejCheckBox")
        self.verticalLayout_12.addWidget(self.trigNoiseRejCheckBox)
        self.trigHFRCheckBox = QtWidgets.QCheckBox(self.oscpage)
        self.trigHFRCheckBox.setObjectName("trigHFRCheckBox")
        self.verticalLayout_12.addWidget(self.trigHFRCheckBox)
        self.verticalLayout_13.addLayout(self.verticalLayout_12)
        self.gridLayout_7.addLayout(self.verticalLayout_13, 0, 0, 1, 1)
        self.toolBox_3.addItem(self.oscpage, "")
        self.genpage = QtWidgets.QWidget()
        self.genpage.setGeometry(QtCore.QRect(0, 0, 182, 196))
        self.genpage.setObjectName("genpage")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.genpage)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.autoOffCheckBox = QtWidgets.QCheckBox(self.genpage)
        self.autoOffCheckBox.setChecked(True)
        self.autoOffCheckBox.setObjectName("autoOffCheckBox")
        self.verticalLayout_14.addWidget(self.autoOffCheckBox)
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.label_23 = QtWidgets.QLabel(self.genpage)
        self.label_23.setObjectName("label_23")
        self.horizontalLayout_24.addWidget(self.label_23)
        self.genWaveformComboBox = QtWidgets.QComboBox(self.genpage)
        self.genWaveformComboBox.setObjectName("genWaveformComboBox")
        self.genWaveformComboBox.addItem("")
        self.genWaveformComboBox.addItem("")
        self.genWaveformComboBox.addItem("")
        self.horizontalLayout_24.addWidget(self.genWaveformComboBox)
        self.verticalLayout_14.addLayout(self.horizontalLayout_24)
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.label_24 = QtWidgets.QLabel(self.genpage)
        self.label_24.setObjectName("label_24")
        self.horizontalLayout_25.addWidget(self.label_24)
        self.genvppdoubleSpinBox = QtWidgets.QDoubleSpinBox(self.genpage)
        self.genvppdoubleSpinBox.setMinimum(0.01)
        self.genvppdoubleSpinBox.setMaximum(10.0)
        self.genvppdoubleSpinBox.setSingleStep(0.01)
        self.genvppdoubleSpinBox.setProperty("value", 2.0)
        self.genvppdoubleSpinBox.setObjectName("genvppdoubleSpinBox")
        self.horizontalLayout_25.addWidget(self.genvppdoubleSpinBox)
        self.verticalLayout_14.addLayout(self.horizontalLayout_25)
        self.gridLayout_12.addLayout(self.verticalLayout_14, 0, 0, 1, 1)
        self.toolBox_3.addItem(self.genpage, "")
        self.gridLayout_6.addWidget(self.toolBox_3, 0, 0, 1, 1)
        self.dockWidget_6.setWidget(self.dockWidgetContents_6)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.dockWidget_6)

        self.retranslateUi(MainWindow)
        self.toolBox_3.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Bode Software 1.0"))
        self.dockWidget.setWindowTitle(_translate("MainWindow", "Measurement Settings"))
        self.label_6.setText(_translate("MainWindow", "Scale"))
        self.measScaleComboBox.setStatusTip(_translate("MainWindow", "Spacing scale between measurements."))
        self.measScaleComboBox.setItemText(0, _translate("MainWindow", "Logarithmic"))
        self.measScaleComboBox.setItemText(1, _translate("MainWindow", "Linear"))
        self.label_5.setText(_translate("MainWindow", "Points"))
        self.pointNumberSpinBox.setStatusTip(_translate("MainWindow", "Number of measurements to be made."))
        self.label.setText(_translate("MainWindow", "Start Frequency"))
        self.startfreqDoubleSpinBox.setStatusTip(_translate("MainWindow", "Starting point of the interval to measure."))
        self.startfreqDoubleSpinBox.setSuffix(_translate("MainWindow", "Hz"))
        self.label_2.setText(_translate("MainWindow", "Stop Frequency"))
        self.endfreqDoubleSpinBox.setStatusTip(_translate("MainWindow", "Ending point of the interval to measure."))
        self.endfreqDoubleSpinBox.setSuffix(_translate("MainWindow", "Hz"))
        self.label_3.setText(_translate("MainWindow", "Center"))
        self.centerDoubleSpinBox.setAccessibleName(_translate("MainWindow", "Central point of the interval to measure."))
        self.centerDoubleSpinBox.setSuffix(_translate("MainWindow", "Hz"))
        self.label_4.setText(_translate("MainWindow", "Span"))
        self.spanDoubleSpinBox.setStatusTip(_translate("MainWindow", "Span of the interval to measure. Can be referenced to center; if center is not set, it is added to starting point."))
        self.spanDoubleSpinBox.setSuffix(_translate("MainWindow", "Hz"))
        self.label_26.setText(_translate("MainWindow", "Noise Tolerance"))
        self.noiseToleranceDoubleSpinBox.setStatusTip(_translate("MainWindow", "Amount measurements are allowed to differ from mean value, relative to peak-to-peak voltage of signal."))
        self.noiseToleranceDoubleSpinBox.setSuffix(_translate("MainWindow", " * Vpp"))
        self.getSpanPushButton.setStatusTip(_translate("MainWindow", "Enable click-and-drag to select interval for measurements directly from plot."))
        self.getSpanPushButton.setText(_translate("MainWindow", "Get from plot"))
        self.label_8.setText(_translate("MainWindow", "Channel In"))
        self.chanInComboBox.setStatusTip(_translate("MainWindow", "Oscilloscope channel to which input signal probe is connected."))
        self.chanInComboBox.setItemText(0, _translate("MainWindow", "1"))
        self.chanInComboBox.setItemText(1, _translate("MainWindow", "2"))
        self.chanInComboBox.setItemText(2, _translate("MainWindow", "3"))
        self.chanInComboBox.setItemText(3, _translate("MainWindow", "4"))
        self.label_9.setText(_translate("MainWindow", "Channel Out"))
        self.chanOutcomboBox.setStatusTip(_translate("MainWindow", "Oscilloscope channel to which output signal probe is connected. Math option is also available."))
        self.chanOutcomboBox.setCurrentText(_translate("MainWindow", "1"))
        self.chanOutcomboBox.setItemText(0, _translate("MainWindow", "1"))
        self.chanOutcomboBox.setItemText(1, _translate("MainWindow", "2"))
        self.chanOutcomboBox.setItemText(2, _translate("MainWindow", "3"))
        self.chanOutcomboBox.setItemText(3, _translate("MainWindow", "4"))
        self.chanOutcomboBox.setItemText(4, _translate("MainWindow", "Math"))
        self.label_10.setText(_translate("MainWindow", "Math"))
        self.mathChan1ComboBox.setStatusTip(_translate("MainWindow", "Channel for math operation. To enable math, select \"Math\" option in \"Channel Out\"."))
        self.mathChan1ComboBox.setItemText(0, _translate("MainWindow", "1"))
        self.mathChan1ComboBox.setItemText(1, _translate("MainWindow", "2"))
        self.mathChan1ComboBox.setItemText(2, _translate("MainWindow", "3"))
        self.mathChan1ComboBox.setItemText(3, _translate("MainWindow", "4"))
        self.mathOperationComboBox.setStatusTip(_translate("MainWindow", "Math Operation to be performed."))
        self.mathOperationComboBox.setItemText(0, _translate("MainWindow", "+"))
        self.mathOperationComboBox.setItemText(1, _translate("MainWindow", "-"))
        self.mathOperationComboBox.setItemText(2, _translate("MainWindow", "*"))
        self.mathChan2ComboBox.setStatusTip(_translate("MainWindow", "Channel for math operation. To enable math, select \"Math\" option in \"Channel Out\"."))
        self.mathChan2ComboBox.setItemText(0, _translate("MainWindow", "1"))
        self.mathChan2ComboBox.setItemText(1, _translate("MainWindow", "2"))
        self.mathChan2ComboBox.setItemText(2, _translate("MainWindow", "3"))
        self.mathChan2ComboBox.setItemText(3, _translate("MainWindow", "4"))
        self.bodeMeasurePushButton.setText(_translate("MainWindow", "Measure"))
        self.dockWidget_2.setWindowTitle(_translate("MainWindow", "Measurements"))
        self.measPlotLeftCheckBox.setText(_translate("MainWindow", "y Left"))
        self.yLeftComboBox.setStatusTip(_translate("MainWindow", "Data to be plotted on left reference."))
        self.measPlotRightCheckBox.setText(_translate("MainWindow", "y Right"))
        self.yRightComboBox.setStatusTip(_translate("MainWindow", "Data to be plotted on right reference."))
        self.measPlotPushButton.setStatusTip(_translate("MainWindow", "Plot selected axis and data."))
        self.measPlotPushButton.setText(_translate("MainWindow", "Plot"))
        self.measClearPushButton.setStatusTip(_translate("MainWindow", "Clear all measurements."))
        self.measClearPushButton.setText(_translate("MainWindow", "Clear"))
        self.measExportPushButton.setStatusTip(_translate("MainWindow", "Export file in selected format. Files are exported to program directory."))
        self.measExportPushButton.setText(_translate("MainWindow", "Export as..."))
        self.fileExtensionComboBox.setStatusTip(_translate("MainWindow", "Exported file format. \"Clipboard\" copies string data, \"Excel clipboard\" copies excel-compatible data."))
        self.fileExtensionComboBox.setItemText(0, _translate("MainWindow", "csv"))
        self.fileExtensionComboBox.setItemText(1, _translate("MainWindow", "clipboard"))
        self.fileExtensionComboBox.setItemText(2, _translate("MainWindow", "excel clipboard"))
        self.dockWidget_6.setWindowTitle(_translate("MainWindow", "Instrument Settings"))
        self.label_11.setText(_translate("MainWindow", "Acquire mode"))
        self.acqModeComboBox.setItemText(0, _translate("MainWindow", "NORM"))
        self.acqModeComboBox.setItemText(1, _translate("MainWindow", "AVER"))
        self.acqModeComboBox.setItemText(2, _translate("MainWindow", "HRES"))
        self.acqModeComboBox.setItemText(3, _translate("MainWindow", "PEAK"))
        self.label_25.setText(_translate("MainWindow", "Trigger"))
        self.label_22.setText(_translate("MainWindow", "Source"))
        self.triggerSourceComboBox.setItemText(0, _translate("MainWindow", "CHAN1"))
        self.triggerSourceComboBox.setItemText(1, _translate("MainWindow", "CHAN2"))
        self.triggerSourceComboBox.setItemText(2, _translate("MainWindow", "CHAN3"))
        self.triggerSourceComboBox.setItemText(3, _translate("MainWindow", "CHAN4"))
        self.label_21.setText(_translate("MainWindow", "Mode"))
        self.triggerModeComboBox.setItemText(0, _translate("MainWindow", "AUTO"))
        self.triggerModeComboBox.setItemText(1, _translate("MainWindow", "NORMAL"))
        self.label_20.setText(_translate("MainWindow", "Coupling"))
        self.triggerCouplingComboBox.setItemText(0, _translate("MainWindow", "DC"))
        self.triggerCouplingComboBox.setItemText(1, _translate("MainWindow", "AC"))
        self.trigNoiseRejCheckBox.setText(_translate("MainWindow", "Noise Reject"))
        self.trigHFRCheckBox.setText(_translate("MainWindow", "HF Reject"))
        self.toolBox_3.setItemText(self.toolBox_3.indexOf(self.oscpage), _translate("MainWindow", "Oscilloscope"))
        self.autoOffCheckBox.setStatusTip(_translate("MainWindow", "Enable this option for turning the generator output off automatically."))
        self.autoOffCheckBox.setText(_translate("MainWindow", "Auto Off"))
        self.label_23.setText(_translate("MainWindow", "Waveform"))
        self.genWaveformComboBox.setItemText(0, _translate("MainWindow", "SIN"))
        self.genWaveformComboBox.setItemText(1, _translate("MainWindow", "SQU"))
        self.genWaveformComboBox.setItemText(2, _translate("MainWindow", "TRI"))
        self.label_24.setText(_translate("MainWindow", "Vpp"))
        self.genvppdoubleSpinBox.setSuffix(_translate("MainWindow", "Vpp"))
        self.toolBox_3.setItemText(self.toolBox_3.indexOf(self.genpage), _translate("MainWindow", "Generator"))

class window(QtWidgets.QMainWindow, Ui_MainWindow):
    
    
    def __init__(self, *args, **kwargs):
        self.currentMeasDF=None
        QtWidgets.QMainWindow.__init__(self, *args, **kwargs)
        self.setupUi(self)
        self.thisInstance=programInstance.programInstance()
        
        self.bodeMeasurePushButton.clicked.connect(self.startMeasurement)
        self.getSpanPushButton.clicked.connect(self.spanf)
        self.measClearPushButton.clicked.connect(self.clearMeasurements)
        self.measExportPushButton.clicked.connect(self.exportCurrentMeas)
        self.measPlotPushButton.clicked.connect(self.plotMeasurement)
        self.memory=[]
        if self.thisInstance.loadError : 
            self.statusbar.showMessage("Signal generator or Oscilloscope not detected. Check NI VISA software for details.")
            self.dockWidget.setDisabled(True)
            self.dockWidget_2.setDisabled(True)
            self.dockWidget_6.setDisabled(True)

    def exportCurrentMeas(self):
        
        exportData(self.currentMeasDF,str(self.fileExtensionComboBox.currentText()))

    def spanf(self):
        self.spanp.active=True


    def clearMeasurements(self):
        self.currentMeasDF=None
        
        self.MplWidget.resetFigure(self.figure)
        self.updatePlotTags()
        self.figure.canvas.draw()
    
    def onselect(self, xmin, xmax):
        self.startfreqDoubleSpinBox.setValue(xmin)
        self.endfreqDoubleSpinBox.setValue(xmax)
        self.span.active=False

    def updatePlotTags(self):
        self.yLeftComboBox.clear()
        self.yRightComboBox.clear()
        if self.currentMeasDF is not None: columns=list(self.currentMeasDF)
        else: columns=[""]
        for idx, item in enumerate(columns):
            self.yLeftComboBox.addItem("")
            self.yRightComboBox.addItem("")
            self.yLeftComboBox.setItemText(idx, QtCore.QCoreApplication.translate("MainWindow", item))
            self.yRightComboBox.setItemText(idx, QtCore.QCoreApplication.translate("MainWindow", item))

    
        
        

    def startMeasurement(self):
        self.settingsUpdate()
        mode=str(self.measModeComboBox.currentText())
        scale=str(self.measScaleComboBox.currentText())
        waveform=str(self.genWaveformComboBox.currentText())
        points=self.pointNumberSpinBox.value()
        startfreq=self.startfreqDoubleSpinBox.value()
        endfreq=self.endfreqDoubleSpinBox.value()
        span=self.spanDoubleSpinBox.value()
        center=self.centerDoubleSpinBox.value()
        vpp=self.genvppdoubleSpinBox.value()
        cIn=int(str(self.chanInComboBox.currentText()))
        try: int(str(self.chanOutcomboBox.currentText()))
        except: cOutL=["CHAN"+str(self.mathChan2ComboBox.currentText()),"CHAN"+str(self.mathChan1ComboBox.currentText())]
        else: cOutL=[int(str(self.chanOutcomboBox.currentText()))]
        noiseTol=self.noiseToleranceDoubleSpinBox.value()
        if self.autoOffCheckBox.isChecked(): autoOff=True
        else: autoOff=False
        self.simple=True
        self.currentMeasDF=measureBode(self.currentMeasDF,startfreq,endfreq,center,span,samp=points,points=None,mode=mode,waveform=waveform,vpp=vpp,cIn=cIn,cOutList=cOutL,noiseTolerance=noiseTol,thisInstance=self.thisInstance,autoOff=autoOff,scale=scale)
        if len(cOutL)>1:#Math
            operation=str(self.mathOperationComboBox.currentText())
            self.currentMeasDF=math(self.currentMeasDF,operation,cOutL)
            self.simple=False
            self.statusbar.showMessage('Select "y Left" and "y Right" axis data and click on "Plot" to plot the measurements.')
        self.updatePlotTags()
        if self.simple: self.plotMeasurement()
        
        
    def settingsUpdate(self):
        self.thisInstance.settings["trigger"]["source"]=str(self.triggerSourceComboBox.currentText())
        self.thisInstance.settings["trigger"]["mode"]=str(self.triggerModeComboBox.currentText())
        self.thisInstance.settings["trigger"]["coupling"]=str(self.triggerCouplingComboBox.currentText())
        if self.trigHFRCheckBox.isChecked():self.thisInstance.settings["trigger"]["HFReject"]="1"
        else : self.thisInstance.settings["trigger"]["HFReject"]="0"
        if self.trigNoiseRejCheckBox.isChecked():self.thisInstance.settings["trigger"]["noiseReject"]="1"
        else : self.thisInstance.settings["trigger"]["noiseReject"]="0"
        self.thisInstance.settings["acquire"]["mode"]=str(self.acqModeComboBox.currentText())

    def plotMeasurement(self):     
        self.displayedList=[str(self.yLeftComboBox.currentText()),str(self.yRightComboBox.currentText())]
        
        if self.simple: self.displayedList=["Phase","Ratio"]
        self.simple=False
        if not self.measPlotLeftCheckBox.isChecked(): self.displayedList[0]=""
        if not self.measPlotRightCheckBox.isChecked(): self.displayedList[1]=""
        self.spanp=self.MplWidget.updateFigure(self.currentMeasDF, self.figure, self.canvas, self.displayedList, self.onselect)
        self.statusbar.clearMessage()
        
    
   
        
        
        
if __name__ == "__main__":
    import sys
    
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = window()
    
    MainWindow.show()
    
    sys.exit(app.exec_())
